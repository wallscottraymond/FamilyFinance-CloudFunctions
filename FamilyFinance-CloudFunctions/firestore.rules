rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =======================
    // HELPER FUNCTIONS
    // =======================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get user role from custom claims
    function getUserRole() {
      return request.auth.token.role;
    }
    
    // Check if user has a specific role
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    // Check if user is admin
    function isAdmin() {
      return hasRole('admin');
    }
    
    // Check if user is parent
    function isParent() {
      return hasRole('parent');
    }
    
    // Check if user can manage (admin or parent)
    function canManage() {
      return isAdmin() || isParent();
    }
    
    // Check if user owns the resource
    function isOwner(resourceUserId) {
      return isAuthenticated() && request.auth.uid == resourceUserId;
    }
    
    // Check if user is in the same family
    function inSameFamily(familyId) {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
    }
    
    // Check if user can access another user (same family or admin)
    function canAccessUser(targetUserId) {
      return isOwner(targetUserId) || 
             isAdmin() ||
             (exists(/databases/$(database)/documents/users/$(targetUserId)) &&
              inSameFamily(get(/databases/$(database)/documents/users/$(targetUserId)).data.familyId));
    }
    
    // Validate user data structure
    function isValidUserData() {
      let data = request.resource.data;
      return data.keys().hasAll(['email', 'displayName', 'role', 'isActive', 'preferences']) &&
             data.email is string && data.email.size() > 0 &&
             data.displayName is string && data.displayName.size() > 0 &&
             data.role is string && data.role in ['admin', 'parent', 'child', 'viewer'] &&
             data.isActive is bool &&
             isValidPreferences(data.preferences);
    }
    
    // Validate preferences structure
    function isValidPreferences(prefs) {
      return prefs.keys().hasAll(['currency', 'locale', 'theme', 'notifications', 'privacy', 'display', 'accessibility', 'financial', 'security']) &&
             prefs.currency is string && prefs.currency.size() == 3 &&
             prefs.locale is string && prefs.locale.size() > 0 &&
             prefs.theme is string && prefs.theme in ['light', 'dark', 'auto'] &&
             isValidNotificationSettings(prefs.notifications) &&
             isValidPrivacySettings(prefs.privacy) &&
             isValidDisplaySettings(prefs.display) &&
             isValidAccessibilitySettings(prefs.accessibility) &&
             isValidFinancialSettings(prefs.financial) &&
             isValidSecuritySettings(prefs.security);
    }
    
    // Validate notification settings
    function isValidNotificationSettings(notifs) {
      return notifs.keys().hasAll(['email', 'push', 'transactionAlerts', 'budgetAlerts', 'weeklyReports']) &&
             notifs.email is bool &&
             notifs.push is bool &&
             notifs.transactionAlerts is bool &&
             notifs.budgetAlerts is bool &&
             notifs.weeklyReports is bool;
    }
    
    // Validate privacy settings
    function isValidPrivacySettings(privacy) {
      return privacy.keys().hasAll(['shareSpendingWithFamily', 'shareGoalsWithFamily', 'allowFamilyToSeeTransactionDetails', 'showProfileToFamilyMembers', 'dataRetentionPeriod', 'allowAnalytics', 'allowMarketingEmails']) &&
             privacy.shareSpendingWithFamily is bool &&
             privacy.shareGoalsWithFamily is bool &&
             privacy.allowFamilyToSeeTransactionDetails is bool &&
             privacy.showProfileToFamilyMembers is bool &&
             privacy.dataRetentionPeriod is int && privacy.dataRetentionPeriod > 0 &&
             privacy.allowAnalytics is bool &&
             privacy.allowMarketingEmails is bool;
    }
    
    // Validate display settings
    function isValidDisplaySettings(display) {
      return display.keys().hasAll(['dateFormat', 'timeFormat', 'numberFormat', 'showCentsInDisplays', 'defaultTransactionView']) &&
             display.dateFormat is string && display.dateFormat in ['MM/DD/YYYY', 'DD/MM/YYYY', 'YYYY-MM-DD'] &&
             display.timeFormat is string && display.timeFormat in ['12h', '24h'] &&
             display.numberFormat is string && display.numberFormat in ['US', 'EU', 'IN'] &&
             display.showCentsInDisplays is bool &&
             display.defaultTransactionView is string && display.defaultTransactionView in ['list', 'cards', 'table'];
    }
    
    // Validate accessibility settings
    function isValidAccessibilitySettings(access) {
      return access.keys().hasAll(['fontSize', 'highContrast', 'reduceMotion', 'screenReaderOptimized', 'voiceOverEnabled', 'hapticFeedback', 'longPressDelay']) &&
             access.fontSize is string && access.fontSize in ['small', 'medium', 'large', 'extra_large'] &&
             access.highContrast is bool &&
             access.reduceMotion is bool &&
             access.screenReaderOptimized is bool &&
             access.voiceOverEnabled is bool &&
             access.hapticFeedback is bool &&
             access.longPressDelay is int && access.longPressDelay >= 100 && access.longPressDelay <= 2000;
    }
    
    // Validate financial settings
    function isValidFinancialSettings(financial) {
      return financial.keys().hasAll(['autoCategorizationEnabled', 'roundUpSavings', 'budgetStartDay', 'showNetWorth', 'hiddenAccounts', 'defaultBudgetAlertThreshold', 'enableSpendingLimits']) &&
             financial.autoCategorizationEnabled is bool &&
             financial.roundUpSavings is bool &&
             financial.budgetStartDay is int && financial.budgetStartDay >= 1 && financial.budgetStartDay <= 31 &&
             financial.showNetWorth is bool &&
             financial.hiddenAccounts is list &&
             financial.defaultBudgetAlertThreshold is int && financial.defaultBudgetAlertThreshold >= 0 && financial.defaultBudgetAlertThreshold <= 100 &&
             financial.enableSpendingLimits is bool;
    }
    
    // Validate security settings
    function isValidSecuritySettings(security) {
      return security.keys().hasAll(['biometricAuthEnabled', 'pinAuthEnabled', 'autoLockTimeout', 'requireAuthForTransactions', 'requireAuthForBudgetChanges', 'requireAuthForGoalChanges', 'sessionTimeout', 'allowedDevices', 'twoFactorAuthEnabled', 'suspiciousActivityDetection']) &&
             security.biometricAuthEnabled is bool &&
             security.pinAuthEnabled is bool &&
             security.autoLockTimeout is int && security.autoLockTimeout >= 0 &&
             security.requireAuthForTransactions is bool &&
             security.requireAuthForBudgetChanges is bool &&
             security.requireAuthForGoalChanges is bool &&
             security.sessionTimeout is int && security.sessionTimeout > 0 &&
             security.allowedDevices is list &&
             security.twoFactorAuthEnabled is bool &&
             security.suspiciousActivityDetection is bool;
    }
    
    // =======================
    // USERS COLLECTION RULES
    // =======================
    
    match /users/{userId} {
      // Allow users to read their own profile
      // Allow family members to read basic profile info (filtered by cloud function)
      // Allow admins to read any user profile
      allow read: if isOwner(userId) || 
                     isAdmin() || 
                     canAccessUser(userId);
      
      // Allow users to create their own profile (via auth trigger usually)
      // This is primarily for the createUserProfile cloud function
      allow create: if isOwner(userId) && 
                       isValidUserData() &&
                       request.resource.data.role == 'viewer'; // New users start as viewers
      
      // Allow users to update their own profile
      // Allow admins to update any user profile
      // Prevent role elevation without proper authorization
      allow update: if (isOwner(userId) || isAdmin()) &&
                       isValidUserData() &&
                       // Users cannot change their own role unless they're admin
                       (isOwner(userId) ? 
                         (request.resource.data.role == resource.data.role || isAdmin()) :
                         true) &&
                       // Prevent deactivating oneself unless admin
                       (isOwner(userId) ? 
                         (request.resource.data.isActive == true || isAdmin()) :
                         true);
      
      // Only admins can delete user profiles (soft delete preferred)
      allow delete: if isAdmin();
      
      // Subcollections for user-specific data
      match /sessions/{sessionId} {
        // Users can manage their own sessions
        allow read, write: if isOwner(userId);
        allow delete: if isOwner(userId) || isAdmin();
      }
      
      match /devices/{deviceId} {
        // Users can manage their own devices
        allow read, write: if isOwner(userId);
        allow delete: if isOwner(userId) || isAdmin();
      }
      
      match /preferences_history/{historyId} {
        // Users can read their preference history
        // Write access controlled by cloud functions
        allow read: if isOwner(userId);
        allow write: if false; // Only cloud functions should write history
      }
      
      match /plaidItems/{itemId} {
        // Users can manage their own Plaid items
        allow read: if isOwner(userId);
        allow create: if isOwner(userId) && isAuthenticated();
        allow update: if isOwner(userId) && isAuthenticated();
        allow delete: if isOwner(userId) || isAdmin();
      }
    }
    
    // =======================
    // FAMILIES COLLECTION RULES
    // =======================
    
    match /families/{familyId} {
      // Family members can read family data
      allow read: if inSameFamily(familyId);
      
      // Only authenticated users can create families (they become admin)
      allow create: if isAuthenticated() && 
                       request.resource.data.adminUserId == request.auth.uid;
      
      // Only family admin can update family settings
      allow update: if inSameFamily(familyId) && 
                       resource.data.adminUserId == request.auth.uid;
      
      // Only family admin can delete family
      allow delete: if resource.data.adminUserId == request.auth.uid;
    }
    
    // =======================
    // TRANSACTIONS COLLECTION RULES
    // =======================
    
    match /transactions/{transactionId} {
      // Users can read their own transactions
      // Family members can read family transactions if familyId is set
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Allow collection queries for authenticated users
      // This is a broad permission for now to get transactions working
      allow list: if isAuthenticated();
      
      // Users can create transactions for themselves
      // Parents/Admins can create for family members
      // Cloud functions can create Plaid transactions
      allow create: if isAuthenticated() &&
                       (isOwner(request.resource.data.userId) || canManage()) &&
                       isValidTransactionData();
      
      // Users can update their own transactions
      // Parents/Admins can update family transactions
      allow update: if (isOwner(resource.data.userId) || 
                       (resource.data.familyId != null && canManage() && inSameFamily(resource.data.familyId))) &&
                       isValidTransactionUpdate();
      
      // Users can delete their own manual transactions
      // Admins can delete any transaction
      allow delete: if (isOwner(resource.data.userId) && resource.data.source != 'plaid') || 
                       isAdmin();
    }
    
    // =======================
    // BUDGETS COLLECTION RULES
    // =======================
    
    match /budgets/{budgetId} {
      // Family members can read family budgets
      allow read: if inSameFamily(resource.data.familyId);
      
      // Only parents/admins can create budgets
      allow create: if canManage() && 
                       inSameFamily(request.resource.data.familyId);
      
      // Only budget creator or family admin can update
      allow update: if (isOwner(resource.data.createdBy) || 
                        (resource.data.familyId == get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.adminUserId == request.auth.uid)) &&
                       inSameFamily(resource.data.familyId);
      
      // Only family admin can delete budgets
      allow delete: if inSameFamily(resource.data.familyId) &&
                       get(/databases/$(database)/documents/families/$(resource.data.familyId)).data.adminUserId == request.auth.uid;
    }
    
    // =======================
    // NOTIFICATIONS COLLECTION RULES
    // =======================
    
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isOwner(resource.data.userId);
      
      // Only cloud functions should create notifications
      allow create: if false;
      
      // Users can mark their own notifications as read
      allow update: if isOwner(resource.data.userId) &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      
      // Users can delete their own notifications
      allow delete: if isOwner(resource.data.userId);
    }
    
    // =======================
    // SOURCE PERIODS COLLECTION RULES
    // =======================
    
    match /source_periods/{periodId} {
      // All authenticated users can read source periods (needed for budget creation)
      // Temporarily remove role dependency for debugging
      allow read: if request.auth != null;
      
      // Only admins can create/update/delete source periods
      allow create, update, delete: if isAdmin();
    }
    
    // =======================
    // ACCOUNTS COLLECTION RULES
    // =======================
    
    match /accounts/{accountId} {
      // Users can read their own accounts
      // Family members can read family accounts
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only authenticated users can create their own accounts
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId);
      
      // Users can update their own accounts
      // Admins can update any account
      allow update: if (isOwner(resource.data.userId) || isAdmin()) &&
                       // Prevent changing userId after creation
                       request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own accounts
      // Admins can delete any account
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // =======================
    // PLAID INTEGRATION COLLECTIONS
    // =======================
    
    match /plaid_items/{itemId} {
      // Users can read their own Plaid items
      // Family members can read basic item info (institution name, status)
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only authenticated users can create their own Plaid items
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       isValidPlaidItemData();
      
      // Users can update their own Plaid items
      // Admins can update any Plaid item for troubleshooting
      allow update: if (isOwner(resource.data.userId) || isAdmin()) &&
                       isValidPlaidItemData() &&
                       // Prevent changing userId after creation
                       request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own Plaid items
      // Admins can delete any Plaid item
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /plaid_accounts/{accountId} {
      // Users can read their own Plaid accounts
      // Family members can read basic account info (name, type, balances)
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only authenticated users can create their own Plaid accounts
      allow create: if isAuthenticated() &&
                       isOwner(request.resource.data.userId) &&
                       isValidPlaidAccountData();
      
      // Users can update their own Plaid accounts (sync settings, visibility)
      // Admins can update any Plaid account
      allow update: if (isOwner(resource.data.userId) || isAdmin()) &&
                       isValidPlaidAccountData() &&
                       // Prevent changing userId after creation
                       request.resource.data.userId == resource.data.userId;
      
      // Users can delete their own Plaid accounts
      // Admins can delete any Plaid account
      allow delete: if isOwner(resource.data.userId) || isAdmin();
    }
    
    match /plaid_transactions/{transactionId} {
      // Users can read their own Plaid transactions
      // Family members can read family transactions (filtered by cloud functions for privacy)
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only cloud functions should create Plaid transactions (from sync)
      allow create: if false;
      
      // Users can update limited fields on their own transactions (user notes, tags, category overrides)
      allow update: if isOwner(resource.data.userId) &&
                       isValidPlaidTransactionUpdate();
      
      // Only admins can delete Plaid transactions (for cleanup)
      allow delete: if isAdmin();
    }
    
    match /plaid_webhooks/{webhookId} {
      // Only admins can read webhook logs (for debugging)
      allow read: if isAdmin();
      
      // Only cloud functions should create webhook records
      allow create: if false;
      
      // Only cloud functions should update webhook processing status
      allow update: if false;
      
      // Only admins can delete webhook records (for cleanup)
      allow delete: if isAdmin();
    }
    
    match /plaid_configuration/config {
      // Only admins can read Plaid configuration
      allow read: if isAdmin();
      
      // Only admins can update Plaid configuration
      allow create, update: if isAdmin() && isValidPlaidConfigData();
      
      // Only admins can delete Plaid configuration
      allow delete: if isAdmin();
    }
    
    match /plaid_recurring_transactions/{recurringTransactionId} {
      // Users can read their own recurring transactions
      // Family members can read family recurring transactions (filtered by cloud functions for privacy)
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only cloud functions should create recurring transactions (from sync)
      allow create: if false;
      
      // Users can update limited fields on their own recurring transactions (user notes, tags, category overrides, visibility)
      allow update: if isOwner(resource.data.userId) &&
                       isValidPlaidRecurringTransactionUpdate();
      
      // Only admins can delete recurring transactions (for cleanup)
      allow delete: if isAdmin();
    }
    
    match /plaid_recurring_transaction_updates/{updateId} {
      // Only admins can read recurring transaction update logs (for debugging)
      allow read: if isAdmin();
      
      // Only cloud functions should create update records
      allow create: if false;
      
      // Only cloud functions should update processing status
      allow update: if false;
      
      // Only admins can delete update records (for cleanup)
      allow delete: if isAdmin();
    }
    
    // =======================
    // INCOME COLLECTION RULES - ROOT LEVEL
    // =======================
    
    match /income/{incomeId} {
      // Users can read their own income streams
      // Family members can read family income streams (filtered by cloud functions for privacy)
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only cloud functions should create income streams (from Plaid sync)
      allow create: if false;
      
      // Users can update limited fields on their own income streams (user notes, tags, category overrides, visibility)
      allow update: if isOwner(resource.data.userId) &&
                       isValidRecurringIncomeUpdate();
      
      // Only admins can delete income streams (for cleanup)
      allow delete: if isAdmin();
    }
    
    // =======================
    // OUTFLOWS COLLECTION RULES - ROOT LEVEL
    // =======================
    
    match /outflows/{outflowId} {
      // Users can read their own outflow streams
      // Family members can read family outflow streams (filtered by cloud functions for privacy)
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only cloud functions should create outflow streams (from Plaid sync)
      allow create: if false;
      
      // Users can update limited fields on their own outflow streams (user notes, tags, category overrides, visibility)
      allow update: if isOwner(resource.data.userId) &&
                       isValidRecurringOutflowUpdate();
      
      // Only admins can delete outflow streams (for cleanup)
      allow delete: if isAdmin();
    }
    
    // Validation functions for Plaid data
    function isValidPlaidItemData() {
      let data = request.resource.data;
      return data.keys().hasAll(['itemId', 'userId', 'institutionId', 'institutionName', 'accessToken', 'products', 'status', 'isActive']) &&
             data.itemId is string && data.itemId.size() > 0 &&
             data.userId is string && data.userId.size() > 0 &&
             data.institutionId is string && data.institutionId.size() > 0 &&
             data.institutionName is string && data.institutionName.size() > 0 &&
             data.accessToken is string && data.accessToken.size() > 0 &&
             data.products is list &&
             data.status is string && data.status in ['GOOD', 'ITEM_LOGIN_REQUIRED', 'PENDING_EXPIRATION', 'EXPIRED', 'ERROR'] &&
             data.isActive is bool &&
             // Ensure familyId matches user's family if provided
             (data.familyId == null || 
              (exists(/databases/$(database)/documents/users/$(data.userId)) &&
               get(/databases/$(database)/documents/users/$(data.userId)).data.familyId == data.familyId));
    }
    
    function isValidPlaidAccountData() {
      let data = request.resource.data;
      return data.keys().hasAll(['accountId', 'itemId', 'userId', 'name', 'type', 'subtype', 'balances', 'isActive', 'isSyncEnabled', 'metadata']) &&
             data.accountId is string && data.accountId.size() > 0 &&
             data.itemId is string && data.itemId.size() > 0 &&
             data.userId is string && data.userId.size() > 0 &&
             data.name is string && data.name.size() > 0 &&
             data.type is string && data.type in ['depository', 'credit', 'loan', 'investment', 'other'] &&
             data.subtype is string &&
             data.balances is map && data.balances.keys().hasAll(['current']) &&
             data.balances.current is number &&
             data.isActive is bool &&
             data.isSyncEnabled is bool &&
             data.metadata is map &&
             // Ensure familyId matches user's family if provided
             (data.familyId == null || 
              (exists(/databases/$(database)/documents/users/$(data.userId)) &&
               get(/databases/$(database)/documents/users/$(data.userId)).data.familyId == data.familyId));
    }
    
    function isValidPlaidTransactionUpdate() {
      let data = request.resource.data;
      let resource = resource.data;
      // Only allow updates to user-modifiable fields
      let allowedFields = ['userCategory', 'userNotes', 'tags', 'isHidden', 'updatedAt'];
      let changedFields = data.diff(resource).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    function isValidPlaidRecurringTransactionUpdate() {
      let data = request.resource.data;
      let resource_data = resource.data;
      // Only allow updates to user-modifiable fields for recurring transactions
      let allowedFields = ['userCategory', 'userNotes', 'tags', 'isHidden', 'updatedAt'];
      let changedFields = data.diff(resource_data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    // Validation functions for new root collections
    function isValidRecurringIncomeUpdate() {
      let data = request.resource.data;
      let resource_data = resource.data;
      // Only allow updates to user-modifiable fields for income streams
      let allowedFields = [
        'userCategory', 'userNotes', 'tags', 'isHidden', 'updatedAt',
        'incomeType', 'isRegularSalary', 'employerName', 'taxable'
      ];
      let changedFields = data.diff(resource_data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    function isValidRecurringOutflowUpdate() {
      let data = request.resource.data;
      let resource_data = resource.data;
      // Only allow updates to user-modifiable fields for outflow streams
      let allowedFields = [
        'userCategory', 'userNotes', 'tags', 'isHidden', 'updatedAt',
        'expenseType', 'isEssential', 'merchantCategory', 'isCancellable', 'reminderDays'
      ];
      let changedFields = data.diff(resource_data).affectedKeys();
      return changedFields.hasOnly(allowedFields);
    }
    
    function isValidPlaidConfigData() {
      let data = request.resource.data;
      return data.keys().hasAll(['clientId', 'environment', 'products', 'countryCodes', 'isActive', 'syncSettings', 'encryptionSettings', 'errorHandling']) &&
             data.clientId is string && data.clientId.size() > 0 &&
             data.environment is string && data.environment in ['sandbox', 'development', 'production'] &&
             data.products is list &&
             data.countryCodes is list &&
             data.isActive is bool &&
             data.syncSettings is map && data.syncSettings.keys().hasAll(['maxTransactionDays', 'frontendTransactionDays', 'enableWebhooks', 'enableScheduledSync']) &&
             data.encryptionSettings is map && data.encryptionSettings.keys().hasAll(['algorithm', 'keyRotationDays']) &&
             data.errorHandling is map && data.errorHandling.keys().hasAll(['maxRetries', 'retryDelayMs', 'errorReportingEnabled']);
    }
    
    // Transaction validation functions
    function isValidTransactionData() {
      let data = request.resource.data;
      return data.keys().hasAll(['id', 'userId', 'amount', 'date', 'name', 'source', 'status']) &&
             data.id is string && data.id.size() > 0 &&
             data.userId is string && data.userId.size() > 0 &&
             data.amount is number &&
             data.date is string &&
             data.name is string && data.name.size() > 0 &&
             data.source is string && data.source in ['manual', 'plaid', 'import'] &&
             data.status is string && data.status in ['pending', 'posted', 'cleared'] &&
             data.isManual is bool &&
             (data.familyId == null || data.familyId is string);
    }
    
    function isValidTransactionUpdate() {
      let data = request.resource.data;
      let resource_data = resource.data;
      let changedFields = data.diff(resource_data).affectedKeys();
      
      // User-modifiable fields for transactions with embedded splits
      let allowedFields = [
        'userNotes',           // User notes
        'isHidden',            // Hide/show transaction
        'isRecurring',         // Mark as recurring
        'splits',              // Transaction splits array
        'isSplit',             // Split flag (calculated from splits)
        'totalAllocated',      // Total split amount (calculated)
        'unallocated',         // Unallocated amount (calculated)
        'updatedAt'            // Update timestamp
      ];
      
      // Validate that only allowed fields are being changed
      let validFieldChanges = changedFields.hasOnly(allowedFields);
      
      // Prevent changing core immutable fields
      let coreFieldsUnchanged = data.userId == resource_data.userId &&
                               data.transactionId == resource_data.transactionId &&
                               data.accountId == resource_data.accountId &&
                               data.amount == resource_data.amount;
      
      // Validate splits if they're being updated
      let splitsValid = !changedFields.hasAny(['splits']) || isValidSplitsUpdate(data.splits, resource_data.amount);
      
      return validFieldChanges && coreFieldsUnchanged && splitsValid;
    }
    
    // Validate transaction splits array
    function isValidSplitsUpdate(splits, transactionAmount) {
      // Empty splits are valid (no splitting)
      return splits.size() == 0 || 
             (splits is list && 
              splits.size() <= 10 && 
              splits.hasAll(['id', 'amount', 'createdAt', 'updatedAt', 'createdBy']));
    }
    
    // =======================
    // BUDGET PERIODS COLLECTION RULES
    // =======================
    
    match /budget_periods/{budgetPeriodId} {
      // Users can read their own budget periods OR family members can read shared budget periods
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Budget creator can always manage their own budget_periods (regardless of role)
      // OR family managers (admin/parent) can manage any family budget_periods
      allow create, update: if isOwner(resource.data.userId) || 
                               (canManage() && resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only admins can delete budget periods (for cleanup)
      allow delete: if isAdmin();
    }
    
    // =======================
    // TRANSACTIONS COLLECTION RULES
    // =======================
    
    match /transactions/{transactionId} {
      // Users can read their own transactions OR family members can read shared transactions
      allow read: if isOwner(resource.data.userId) || 
                     (resource.data.familyId != null && inSameFamily(resource.data.familyId));
      
      // Only cloud functions can create transactions (from Plaid sync)
      allow create: if false;
      
      // Users can update their own transactions (user notes, splits, categories)
      // Family managers can update family transactions
      allow update: if (isOwner(resource.data.userId) || 
                        (resource.data.familyId != null && inSameFamily(resource.data.familyId) && canManage())) &&
                       isValidTransactionUpdate();
      
      // Only admins can delete transactions (for cleanup)
      allow delete: if isAdmin();
    }
    
    // =======================
    // SYSTEM COLLECTIONS
    // =======================
    
    // Admin-only collections
    match /admin/{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Analytics and logs (read-only for admins)
    match /analytics/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // Only cloud functions
    }
    
    match /audit_logs/{document=**} {
      allow read: if isAdmin();
      allow write: if false; // Only cloud functions
    }
    
    // Deny all other requests
    match /{document=**} {
      allow read, write: if false;
    }
  }
}